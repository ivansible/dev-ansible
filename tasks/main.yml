---
# tasks for ivansible.dev-ansible

- name: install ansible packages
  block:
    - name: install system packages for ansible
      block:
        - name: install system packages (will update if it fails)
          apt:
            name: "{{ dev_ansible_system_packages }}"
          become: true
          ## reduce long error message
          no_log: "{{ hide_secrets |bool }}"
      rescue:
        - name: install system packages (update cache)
          apt:
            name: "{{ dev_ansible_system_packages }}"
            update_cache: true
          become: true

    - name: upload pip requirements
      copy:
        src: requirements.txt
        dest: "{{ dev_ansible_package_list }}"
        force: true
        mode: 0644

    - name: check that ansible is installed
      stat:
        path: "{{ dev_ansible_dir }}/site-packages/ansible/__init__.py"
      register: stat_ansible_package

    - name: setup virtual environment
      pip:
        requirements: "{{ dev_ansible_package_list }}"
        virtualenv: "{{ dev_ansible_dir }}"
        virtualenv_python: "{{ dev_ansible_python }}"
      when: not stat_ansible_package.stat.exists
  tags:
    - dev_ansible_install
    - dev_ansible_all


- name: workaround for old ansible pre-installed on vagrant
  block:
    - name: check installed ansible version (ok to fail)
      command: "{{ dev_ansible_dir }}/bin/ansible --version"
      changed_when: false
      register: ansible_version_result

    - name: upgrade virtual environment if it has old ansible 2.8
      pip:
        state: latest
        requirements: "{{ dev_ansible_package_list }}"
        virtualenv: "{{ dev_ansible_dir }}"
      tags: skip_ansible_lint  # noqa 403 (latest is intended)
      ## detection get skipped and produces no output in check mode
      when:
        - not ansible_check_mode
        - ansible_version_result.stdout |d('') is search('ansible 2.8')
  tags:
    - dev_ansible_upgrade
    - dev_ansible_all


- name: apply patches to ansible, mitogen and molecule
  block:
    - name: detect site-packages directory
      shell:
        cmd: |
          from __future__ import print_function
          import sys
          [print(dir) for dir in sys.path if dir.endswith('site-packages')]
        executable: "{{ dev_ansible_dir }}/bin/python"
      changed_when: false
      register: detect_site_packages_result

    - name: create symbolic link for site-packages
      file:
        state: link
        src: "{{ site_packages |relpath(venv_dir) }}"
        dest: "{{ venv_dir }}/site-packages"
      vars:
        site_packages: "{{ detect_site_packages_result.stdout_lines |first }}"
        venv_dir: "{{ dev_ansible_dir |expanduser }}"


    - name: patch molecule (scenario from MOLECULE_TARGET)
      patch:
        src: molecule-target.patch
        dest: "{{ dev_ansible_dir }}/site-packages/molecule/command/base.py"
        backup: true
      ignore_errors: true

    - name: patch ansible restconf (fix "JSON object must be str")
      patch:
        src: ansible-restconf.patch
        dest: "{{ dev_ansible_dir }}/site-packages/ansible/plugins/httpapi/restconf.py"
        backup: true
      ignore_errors: true
      ## the issue manifests itself as error "JSON object must be str"
      ## in the custom restconf_config2 module used by ndm- keenetic roles
      ## because in python 3.5 on xenial json.loads() accepts only type 'str';
      ## in python 3.6 on bionic json.loads() accepts and converts 'bytes'
      ## and the problem is no more, so we skip the patch on bionic and later.
      ## python 2.7 also has this bug but is not used by ansible.
      when: ansible_lsb.codename == 'xenial'

    - name: patch mitogen (fix "pending work still existed after shutdown")
      patch:
        src: mitogen-shutdown.patch
        dest: "{{ dev_ansible_dir }}/site-packages/mitogen/core.py"
        backup: true
      ignore_errors: true
  ## detection task produces no output in check mode
  when: not ansible_check_mode
        and dev_ansible_apply_patches |bool
  tags:
    - dev_ansible_patch
    - dev_ansible_all


- name: convenient links for user-local ansible binaries
  block:
    - name: expand home directory in parameters
      set_fact:
        bin_dir: "{{ dev_ansible_dir |expanduser }}/bin"
        link_dir: "{{ dev_ansible_link_dir |expanduser }}"

    - name: directory for links to ansible binaries
      file:
        path: "{{ link_dir }}"
        state: directory
        mode: 0755
      register: link_dir_result

    - name: links for ansible-prefixed binaries
      shell: >
        for bin in ansible-* ; do
          ln -s -f \
            "{{ bin_dir | relpath(link_dir) }}/$bin" \
            "{{ link_dir }}/"
        done
      args:
        chdir: "{{ bin_dir }}"
        creates: "{{ link_dir }}/ansible-playbook"

    - name: links for ansible flavored pip, python etc
      file:
        state: link
        src: "{{ bin_dir | relpath(link_dir) }}/{{ item.0 }}"
        dest: "{{ link_dir }}/{{ item.1 }}"
      loop: "{{ dev_ansible_linked_binaries }}"
      loop_control:
        label: "{{ item.1 }}"

  when: dev_ansible_link_dir |d('')
  tags:
    - dev_ansible_links
    - dev_ansible_all


- name: convenient ansible aliases in users profile
  block:
    - name: add link directory on the path
      blockinfile:
        # path file must correspond with role ivansible.dev_user
        # https://github.com/ivansible/dev-user/blob/master/tasks/bashrc.yml
        path: ~/.local/bashrc/2path.sh
        block: |
          if [ -n "${PATH##*{{ dev_ansible_link_dir }}}" ] && [ -n "${PATH##*{{ dev_ansible_link_dir }}:*}" ]; then
              export PATH={{ dev_ansible_link_dir }}:$PATH
          fi
        state: present
        marker: '# == {mark} ANSIBLE PATHS =='
      when: dev_ansible_link_dir != ''  # noqa 602

    - name: alias for ansible-playbook
      lineinfile:
        path: ~/.local/bashrc/4alias.sh
        line: "alias ap='ansible-playbook'"

  when: dev_ansible_update_bashrc |bool
  tags:
    - dev_ansible_bashrc
    - dev_ansible_all
...
